<?xml version="1.0" encoding="utf-8"?>
<modification>
    <code>oct_product_auto_related</code>
    <name>Octemplates - Auto Related Products</name>
    <version>1.0.0</version>
    <author>eapdob</author>
    <link>eapdob@gmail.com</link>
    <file path="catalog/controller/product/product.php">
        <operation>
            <search><![CDATA[public function review() {]]></search>
            <add position="before"><![CDATA[
                // oct_product_auto_related
                public function getAutoRels() {
                    $this->load->model('catalog/product');
                    $this->load->model('tool/image');

                    $data = array();
                    $data = array_merge($data, $this->load->language('product/product'));

                    $resultss = $this->model_catalog_product->getProductRelated($this->request->get['product_id']);

                    $oct_product_auto_related_data = $this->config->get('oct_product_auto_related_data');

                    if (isset($oct_product_auto_related_data) && $oct_product_auto_related_data['status'] != 0) {

                        // oct_product_auto_related start
                        $oct_product_auto_related_data = $this->config->get('oct_product_auto_related_data');

                        $this->load->model('extension/module/oct_product_auto_related');

                        $data_info = array(
                            'product_id'          => $this->request->get['product_id'],
                            'sort'                => 'p.product_id',
                            'filter_category_id'  => (isset($category_id)) ? $category_id : 0,
                            'filter_sub_category' => 1,
                            'order'               => 'DESC',
                            'start'               => 0,
                            'limit'               => $oct_product_auto_related_data['limit']
                        );

                        $resultss += $this->model_extension_module_oct_product_auto_related->getProductAutoRelated($data_info);
                    }

                    $data['products'] = array();

                    // oct_stickers
                    $oct_product_stickers = [];
                    $data['sticker_colors'] = [];

                    if ($this->config->get('oct_stickers_status')) {
                        $oct_stickers = $this->config->get('oct_stickers_data');

                        $data['oct_sticker_you_save'] = false;

                        if ($oct_stickers) {
                            $data['oct_sticker_you_save'] = isset($oct_stickers['stickers']['special']['persent']) ? true : false;
                        }

                        $this->load->model('octemplates/stickers/oct_stickers');
                    }
                    // END oct_stickers

                    foreach ($resultss as $result) {

                        if ($result['image']) {
                            $image = $this->model_tool_image->resize($result['image'], $this->config->get('theme_default_image_related_width'), $this->config->get('theme_default_image_related_height'));
                        } else {
                            $image = $this->model_tool_image->resize('placeholder.png', $this->config->get('theme_default_image_related_width'), $this->config->get('theme_default_image_related_height'));
                        }

                        if ($this->customer->isLogged() || !$this->config->get('config_customer_price')) {
                            $price = $this->currency->format($this->tax->calculate($result['price'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
                        } else {
                            $price = false;
                        }

                        if ((float)$result['special']) {
                            $special = $this->currency->format($this->tax->calculate($result['special'], $result['tax_class_id'], $this->config->get('config_tax')), $this->session->data['currency']);
                        } else {
                            $special = false;
                        }

                        if ($this->config->get('config_tax')) {
                            $tax = $this->currency->format((float)$result['special'] ? $result['special'] : $result['price'], $this->session->data['currency']);
                        } else {
                            $tax = false;
                        }

                        if ($this->config->get('config_review_status')) {
                            $rating = (int)$result['rating'];
                        } else {
                            $rating = false;
                        }

                        $data['products'][] = array(
                            'product_id'  => $result['product_id'],
                            'thumb'       => $image,
                            'name'        => $result['name'],
                            'description' => utf8_substr(strip_tags(html_entity_decode($result['description'], ENT_QUOTES, 'UTF-8')), 0, $this->config->get($this->config->get('config_theme') . '_product_description_length')) . '..',
                            'price'       => $price,
                            'special'     => $special,
                            'tax'         => $tax,
                            'minimum'     => $result['minimum'] > 0 ? $result['minimum'] : 1,
                            'rating'      => $rating,
                            'href'        => $this->url->link('product/product', 'product_id=' . $result['product_id'])
                        );
                    }

                    // oct_stickers
                    if (isset($data['sticker_colors']) && $data['sticker_colors']) {
                        $oct_color_stickers = [];

                        foreach ($data['sticker_colors'] as $sticker_colors) {
                            foreach ($sticker_colors as $key=>$sticker_color) {
                                $oct_color_stickers[$key] = $sticker_color;
                            }
                        }

                        $data['sticker_colors'] = $oct_color_stickers;
                    }
                    // END oct_stickers

                    $this->response->setOutput($this->load->view('product/product_related', $data));
                }
                // END oct_product_auto_related
            ]]>
            </add>
        </operation>
        <operation>
            <search><![CDATA[$results = $this->model_catalog_product->getProductRelated($this->request->get['product_id']);]]></search>
            <add position="replace"><![CDATA[
            // oct_product_auto_related
            $product_data_related = $this->cache->get('octemplates.oct_product_auto_related.product.' . (int) $this->config->get('config_store_id') . '.' . (int) $this->config->get('config_customer_group_id') . '.' . (int) $this->request->get['product_id'] . '.' . (int)$this->config->get('config_language_id'));

            $data['oct_rel_view'] = false;

            if ($product_data_related) {

                $results = $this->model_catalog_product->getProductRelated($this->request->get['product_id']);

                $oct_product_auto_related_data = $this->config->get('oct_product_auto_related_data');

                if (isset($oct_product_auto_related_data) && $oct_product_auto_related_data['status'] != 0) {

                    // oct_product_auto_related
                    $oct_product_auto_related_data = $this->config->get('oct_product_auto_related_data');

                    $this->load->model('extension/module/oct_product_auto_related');

                    $data_info = array(
                        'product_id'          => $this->request->get['product_id'],
                        'sort'                => 'p.product_id',
                        'filter_category_id'  => (isset($category_id)) ? $category_id : 0,
                        'filter_sub_category' => 1,
                        'order'               => 'DESC',
                        'start'               => 0,
                        'limit'               => $oct_product_auto_related_data['limit']
                    );

                    $results += $this->model_extension_module_oct_product_auto_related->getProductAutoRelated($data_info);

                    $data['oct_rel_view'] = true;
                }
            // END oct_product_auto_related
        ]]></add>
        </operation>
        <operation>
            <search><![CDATA[$data['tags'] = array();]]></search>
            <add position="before"><![CDATA[}]]></add>
        </operation>
        <operation>
            <search><![CDATA[if ($result['image']) {]]></search>
            <add position="before"><![CDATA[
                if (isset($oct_product_auto_related_data['status']) && $oct_product_auto_related_data['status']) {
                    if ($result['image']) {
                        $image_auto_related = $this->model_tool_image->resize($result['image'], $oct_product_auto_related_data['width'], $oct_product_auto_related_data['height']);
                    } else {
                        $image_auto_related = $this->model_tool_image->resize('placeholder.png', $oct_product_auto_related_data['width'], $oct_product_auto_related_data['height']);
                    }
                } else {
                    if ($result['image']) {
                        $image_auto_related = $this->model_tool_image->resize($result['image'], $this->config->get('theme_default_image_related_width'), $this->config->get('theme_default_image_related_height'));
                    } else {
                        $image_auto_related = $this->model_tool_image->resize('placeholder.png', $this->config->get('theme_default_image_related_width'), $this->config->get('theme_default_image_related_height'));
                    }
                }
        ]]></add>
        </operation>
        <operation>
            <search><![CDATA['thumb'       => $image,]]></search>
            <add position="replace"><![CDATA[
                'thumb' => $image_auto_related,
            ]]></add>
        </operation>
    </file>
    <file path="catalog/view/theme/oct_ultrastore/template/product/product.twig">
        <operation>
            <search index="1"><![CDATA[{% if products %}]]></search>
            <add position="replace"><![CDATA[
                {% if oct_rel_view == false %}
                    <div id="autorelated"></div>
                {% endif %}
                {% if products and oct_rel_view %}
            ]]></add>
        </operation>
        <operation>
            <search><![CDATA[{{ footer }}]]></search>
            <add position="before"><![CDATA[
                {% if oct_rel_view == false %}
                <script>
                    $.ajax({
                        url: 'index.php?route=product/product/getAutoRels&product_id={{ product_id }}',
                        dataType: 'html',
                        success: function(json) {
                            $("#autorelated").html(json);
                        }
                    });
                </script>
                {% endif %}
            ]]></add>
        </operation>
    </file>

    <!-- oct_stickers -->
    <file path="catalog/model/extension/module/oct_product_auto_related.php">
        <operation>
            <search><![CDATA[$query->row['special'],]]></search>
            <add position="after"><![CDATA[
			'oct_stickers'		=> isset($query->row['oct_stickers']) ? unserialize($query->row['oct_stickers']) : false,
			'you_save'          => $query->row['special'] ? '-' . ($query->row['discount'] ? number_format(((float)$query->row['discount'] - (float)$query->row['special']) / (float)$query->row['discount'] * 100, 0) : number_format(((float)$query->row['price'] - (float)$query->row['special']) / (float)$query->row['price'] * 100, 0)) . '%' : false,
			]]></add>
        </operation>
    </file>
    <!-- END oct_stickers -->

    <!-- oct_product_preorder -->
    <file path="catalog/model/extension/module/oct_product_auto_related.php">
        <search><![CDATA['product_id'       => $query->row['product_id'],]]></search>
        <add position="after"><![CDATA[
                // oct_product_auto_related
				'oct_stock_status_id' => $query->row['stock_status_id'],
				// END oct_product_auto_related
        ]]></add>
    </file>
    <file path="catalog/view/theme/oct_ultrastore/template/product/product_related.twig">
        <operation>
            <search><![CDATA[<div class="us-module-item d-flex flex-column">]]></search>
            <add position="replace"><![CDATA[
				<div class="us-module-item d-flex flex-column{% if product.product_preorder_status == 2 and product.quantity <= 0 %} us-no-stock{% endif %}">
			]]></add>
        </operation>
        <operation error="skip">
            <search><![CDATA[<a href="javascript:void(0);" onclick="cart.add('{{ product.product_id }}');" class="us-module-cart-btn button-cart">{{ button_cart }}</a>]]></search>
            <add position="replace"><![CDATA[<a href="{% if (product.product_preorder_status == 1 or product.product_preorder_status == 2) and product.quantity > 0 %}javascript:void(0);{% else %}{{ product.href }}{% endif %}"{% if product.quantity > 0 %} onclick="cart.add('{{ product.product_id }}');"{% elseif (product.product_preorder_status == 1 or product.product_preorder_status == 2) and product.quantity <= 0 %} onclick="get_oct_product_preorder('{{ product.product_id }}');"{% else %}{% endif %} class="us-module-cart-btn button-cart">{{ ((product.product_preorder_status == 1 or product.product_preorder_status == 2) and product.quantity <= 0) ? product.product_preorder_text : button_cart }}</a>]]></add>
        </operation>
    </file>
    <!-- END oct_product_preorder -->
</modification>